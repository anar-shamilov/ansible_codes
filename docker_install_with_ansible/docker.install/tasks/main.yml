---

- name: Install Docker's dependencies
  apt:
    name: "{{ docker__package_dependencies + docker__pip_dependencies }}"

- name: Add Docker's public GPG key to the APT keyring
  apt_key:
    id: "{{ docker__apt_key_id }}"
    url: "{{ docker__apt_key_url }}"

- name: Configure Docker's upstream APT repository
  apt_repository:
    repo: "{{ docker__apt_repository }}"
    update_cache: true

- name: Install Docker
  apt:
    name: "docker-{{ docker__edition }}"
    state: "{{ docker__state }}"

- name: Install Python packages
  pip:
    name: >
      {{ item.name }}{% if item.version | d() %}=={{ item.version }}{% endif %}
    virtualenv: "{{ docker__pip_virtualenv }}"
    state: "{{ item.state | d('present') }}"
  loop: "{{ docker__default_pip_packages + docker__pip_packages }}"
  when: item.name | d()

- name: Symlink Python binary to /usr/local/bin/python-docker
  file:
    path: "/usr/local/bin/python-docker"
    src: "{{ docker__pip_virtualenv }}/bin/python"
    force: true
    state: "link"

- name: Symlink selected Python package binaries to /usr/local/bin
  file:
    path: "{{ item.path }}"
    src: "{{ item.src }}"
    force: true
    state: "link"
  loop: "{{ docker__default_pip_packages + docker__pip_packages }}"
  when:
    - item.state | d("present") != "absent"
    - item.path | d() and item.src | d()

- name: Add user(s) to "docker" group
  user:
    name: "{{ item }}"
    groups: "docker"
    append: true
  loop: "{{ docker__users }}"

- name: Manage Docker registry login credentials
  docker_login:
    registry_url: "https://index.docker.io/v1/"
    username: "your-username"
    password: "your-password"
    email: "{{ item.email | d(omit) }}"
    reauthorize: "{{ item.reauthorize | d(omit) }}"
    config_path: "{{ item.config_path | d((ansible_env.PWD | d('/userName')) + '/.docker/config.json') }}"
    state: "{{ item.state | d('present') }}"
  #loop: "{{ docker__registries }}"
  #when: item.username | d() and item.password | d()
  vars:
    ansible_python_interpreter: "{{ '/usr/bin/env python-docker' }}"

- name: Recursively change ownership of a directory .docker
  file:
    path: /home/userName/.docker
    state: directory
    recurse: yes
    owner: userName
    group: groupName

- name: Remove Docker related cron jobs
  file:
    path: "/etc/cron.d/{{ item.cron_file }}"
    state: "absent"
  loop: "{{ docker__cron_jobs }}"
  when:
    - item.state | d("present") == "absent"
    - item.cron_file | d()

- name: Create Docker related cron jobs
  cron:
    name: "{{ item.name }}"
    job: "{{ item.job }}"
    minute: "{{ item.schedule[0] }}"
    hour: "{{ item.schedule[1] }}"
    day: "{{ item.schedule[2] }}"
    month: "{{ item.schedule[3] }}"
    weekday: "{{ item.schedule[4] }}"
    cron_file: "{{ item.cron_file }}"
    user: "{{ item.user | d('root') }}"
  loop: "{{ docker__cron_jobs }}"
  when:
    - item.state | d("present") != "absent"
    - item.name | d() and item.job | d()
    - item.schedule | d() and item.cron_file | d()
